#version 430

const ivec3 cornerTable [] = {
		ivec3(0, 0, 0),
		ivec3(1, 0, 0),
		ivec3(1, 1, 0),
		ivec3(0, 1, 0),
		ivec3(0, 0, 1),
		ivec3(1, 0, 1),
		ivec3(1, 1, 1),
		ivec3(0, 1, 1)
};

// input
layout(binding = 0) uniform isamplerBuffer voxels;
layout(binding = 2) uniform isamplerBuffer triTableTex;

// output
layout(binding = 3, r32i) uniform iimageBuffer vertsCount;

uniform int WIDTH;
uniform int HEIGHT;
uniform int DEPTH;

uniform int threshold;

int cube[8];

int get_voxel(int x, int y, int z)
{
	return int(texelFetch(voxels, z * WIDTH * HEIGHT + y * WIDTH + x).r);
}

void get_cube(ivec3 upos)
{
	for (int i = 0; i < 8; i++)
	{
		ivec3 v = upos + cornerTable[i];
		cube[i] = get_voxel(v.x, v.y, v.z);
	}
}

int triTable(int i, int j)
{
	return int(texelFetch(triTableTex, i*16 + j).r);
}

layout(local_size_x = 1, local_size_y = 1) in;
void main()
{
	ivec3 gridPos = ivec3(gl_GlobalInvocationID.xyz);
	int index = gridPos.z * (WIDTH - 1) * (HEIGHT - 1) + gridPos.y * (WIDTH - 1) + gridPos.x;

	vec3 pos = vec3(float(gridPos.x), float(gridPos.y), float(gridPos.z));
	
	vec3 offs = vec3(0.0, 0.0, 0.0);

	get_cube(gridPos);
	
	int config = 0;
	for (int i = 0; i < 8; i++) 
		if (cube[i] > threshold)
			config |= 1 << i;

	if (config == 0 || config == 255) {	
		imageStore(vertsCount, index, ivec4(0, 0, 0, 0));
		return;
	}
	
	int edge = 0;
	bool exit = false;
	for (int i = 0; i < 5; i++)
	{
		for (int p = 0; p < 3; p++)
		{
			int index = triTable(config, edge);
						
			if (index == -1)
			{
				exit = true;
				break;
			}
	
			edge++;
		}

		if(exit) break;
	}

	imageStore(vertsCount, index, ivec4(edge, 0, 0, 0));
}