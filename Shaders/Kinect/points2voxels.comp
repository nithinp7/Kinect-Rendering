#version 430

#define EPSILON 1e-4

// input 
layout(binding = 2, rgba32f) uniform image2D point_cloud;
layout(binding = 3) uniform isamplerBuffer cell_buckets_heads;
layout(binding = 4) uniform isamplerBuffer cell_buckets_nodes;

// output
layout(binding = 0, r16i) uniform iimageBuffer voxels;
layout(binding = 1, r32ui) uniform uimageBuffer voxels_col;

uniform int KERNEL_RADIUS;

uniform int POINTS_WIDTH;
uniform int POINTS_HEIGHT;

uniform int WIDTH;
uniform int HEIGHT;
uniform int DEPTH;

void density_contribution_from_cell(int vx, int vy, int vz, int cx, int cy, int cz, inout float density_sum, inout vec4 color_sum)
{
	int cell_index = (cz * (HEIGHT - 1) + cy) * (WIDTH - 1) + cx;
	int next = texelFetch(cell_buckets_heads, cell_index).r;

	while (next != -1)
	{
		int nextX = (2 * next) % (2 * POINTS_WIDTH);
		int nextY = next / POINTS_WIDTH;
		vec3 pos = imageLoad(point_cloud, ivec2(nextX, nextY)).xyz;
		vec4 color = imageLoad(point_cloud, ivec2(nextX + 1, nextY));

		float dif = length(pos - vec3(vx, vy, vz));
		float w = 0;

		if(dif < 1) 
			w = 2.0 / 3.0 - pow(dif, 2) + 0.5 * pow(dif, 3);
		else if(dif < 2) 
			w = 1.0 / 6.0 * pow(2 - dif, 3);
		

		density_sum += 15.0f * w;
		color_sum += 5.0f * color * w;
		/*
		float dif = length(pos - vec3(vx, vy, vz)) / KERNEL_RADIUS;
		float w = (1 + 3 * dif) * pow(1 - dif, 3);

		if (dif < 1) {
			density_sum += 15.0f * w;
			color_sum += 10.0f * color * w;
		}
		*/
		next = texelFetch(cell_buckets_nodes, next).r;
	}
}

bool check_cell_in_bounds(int cx, int cy, int cz)
{
	return cx >= 0 && cy >= 0 && cz >= 0 && cx < WIDTH - 1 && cy < HEIGHT - 1 && cz < DEPTH - 1;
}

layout(local_size_x = 1, local_size_y = 1) in;
void main() {
	ivec3 vcoords = ivec3(gl_GlobalInvocationID.xyz);
	int index = vcoords.z * WIDTH * HEIGHT + vcoords.y * WIDTH + vcoords.x;
	float density = 0;
	vec4 color = vec4(0);

	for(int kx = -KERNEL_RADIUS; kx < KERNEL_RADIUS; kx++)
		for(int ky = -KERNEL_RADIUS; ky < KERNEL_RADIUS; ky++)
			for(int kz = -KERNEL_RADIUS; kz < KERNEL_RADIUS; kz++) 
				if(check_cell_in_bounds(vcoords.x + kx, vcoords.y + ky, vcoords.z + kz))
					density_contribution_from_cell(vcoords.x, vcoords.y, vcoords.z, 
												   vcoords.x + kx, vcoords.y + ky, vcoords.z + kz, 
												   density, color);

	if(color.a > EPSILON)
		color = color / color.a;

	color *= 255;

	unsigned int color_packed = unsigned int(color.r) << 24 | 
								unsigned int(color.g) << 16 & 0x00ff0000 | 
								unsigned int(color.b) <<  8 & 0x0000ff00 | 
								0xff;

	imageStore(voxels, index, ivec4(int(density), 0, 0, 0));
	imageStore(voxels_col, index, uvec4(color_packed, 0, 0, 0));
}